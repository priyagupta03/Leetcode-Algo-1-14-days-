Q1: Binary search
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.

Sol1:
if target not in nums:
            return -1
        else:
            return nums.index(target)
            
Sol2:
left, right = 0, len(nums)

        while left < right:

            mid = (left + right) // 2 # floor division
            
            # search right half
            if nums[mid] < target:
                left = mid + 1
            
            # search left half
            elif nums[mid] > target:
                right = mid 

            else:
                return mid
        
        return -1
        
        
        
        
        
        
Q2 First bad version
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
Sol1:
class Solution:
    def firstBadVersion(self, n: int) -> int:
        low = 0
        high = n
        ans = n
        
        while low <= high:
            mid = (low + high) // 2
            
            if (isBadVersion(mid)):
                ans = mid
                high = mid - 1
            else:
                low = mid + 1
                
        return ans
        
        
        
        
        
 Q3: Search insert position
 Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.You must write an algorithm with O(log n) runtime complexity.
 Sol1:
 class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)-1  
        if target in nums:
            return nums.index(target)
        else:      
            while low <= high:
                mid = (low + high) // 2

                if nums[mid] >target:
                    high = mid-1
                               
                else:
                    low = mid + 1

            return low
