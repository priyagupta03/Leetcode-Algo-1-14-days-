Q1: Two Sum II - Input Array Is Sorted
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.

Sol1:
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        i=0
        j = len(numbers)-1
        val = numbers[i]+numbers[j]
        while val != target:
            if val < target:
                i +=1
            if val > target:
                j -= 1
            val = numbers[i]+numbers[j]
        return [i+1,j+1]
        
Sol2:
left = 0
        right = len(numbers)-1
        
        while (right >= left ):
            twoSum = numbers[left] + numbers[right] 
            
            if twoSum == target:
                return [left+1,right+1]
            elif twoSum < target :
                left = left +1 
            elif twoSum > target :
                right = right -1
                
Sol3:
d = defaultdict(int)
        
        for i, val in enumerate(numbers):
            
            if target - val in d:
                return [d[target-val], i+1]
            
            d[val] = i+1
