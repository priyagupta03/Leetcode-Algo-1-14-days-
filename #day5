Q1:Middle of the Linked List
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Sol1:
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow=fast=head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        return slow
        
Sol2:
i=0
        aux=head
        while aux !=None:
            aux=aux.next
            i+=1
        for j in range(i//2):
            head=head.next
        return head
        
        
Sol3:
def get_length(head):
    if head is None:
        return 0
    else:
        return 1 + get_length(head.next)
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        half = int(get_length(head) / 2) + 1
        for i in range(1,half):
            head = head.next
        return head
        
        
        
        
        
Q2: Remove Nth Node From End of List
Given the head of a linked list, remove the nth node from the end of the list and return its head.
Sol1:
fast = head
        slow = head
        for i in range(n):
            fast = fast.next
        if fast == None:
            return head.next
        while(fast.next):
            fast = fast.next
            slow = slow.next
        slow.next = slow.next.next
        return head
